// Code generated by mockery v2.50.0. DO NOT EDIT.

package embedded

import mock "github.com/stretchr/testify/mock"

// MockMeter is an autogenerated mock type for the Meter type
type MockMeter struct {
	mock.Mock
}

type MockMeter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMeter) EXPECT() *MockMeter_Expecter {
	return &MockMeter_Expecter{mock: &_m.Mock}
}

// meter provides a mock function with no fields
func (_m *MockMeter) meter() {
	_m.Called()
}

// MockMeter_meter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'meter'
type MockMeter_meter_Call struct {
	*mock.Call
}

// meter is a helper method to define mock.On call
func (_e *MockMeter_Expecter) meter() *MockMeter_meter_Call {
	return &MockMeter_meter_Call{Call: _e.mock.On("meter")}
}

func (_c *MockMeter_meter_Call) Run(run func()) *MockMeter_meter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMeter_meter_Call) Return() *MockMeter_meter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMeter_meter_Call) RunAndReturn(run func()) *MockMeter_meter_Call {
	_c.Run(run)
	return _c
}

// NewMockMeter creates a new instance of MockMeter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMeter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMeter {
	mock := &MockMeter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
